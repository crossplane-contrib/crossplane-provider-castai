/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AllocationGroupInitParameters struct {

	// (Set of String) List of CAST AI cluster ids
	// List of CAST AI cluster ids
	// +listType=set
	ClusterIds []*string `json:"clusterIds,omitempty" tf:"cluster_ids,omitempty"`

	// (Map of String) Labels used to select workloads to track
	// Labels used to select workloads to track
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// workload needs to have at least one label to be included
	// AND - workload needs to have all the labels to be included
	// Operator with which to connect the labels
	// OR (default) - workload needs to have at least one label to be included
	// AND - workload needs to have all the labels to be included
	LabelsOperator *string `json:"labelsOperator,omitempty" tf:"labels_operator,omitempty"`

	// (String) Allocation group name
	// Allocation group name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of cluster namespaces to track
	// List of cluster namespaces to track
	Namespaces []*string `json:"namespaces,omitempty" tf:"namespaces,omitempty"`
}

type AllocationGroupObservation struct {

	// (Set of String) List of CAST AI cluster ids
	// List of CAST AI cluster ids
	// +listType=set
	ClusterIds []*string `json:"clusterIds,omitempty" tf:"cluster_ids,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Map of String) Labels used to select workloads to track
	// Labels used to select workloads to track
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// workload needs to have at least one label to be included
	// AND - workload needs to have all the labels to be included
	// Operator with which to connect the labels
	// OR (default) - workload needs to have at least one label to be included
	// AND - workload needs to have all the labels to be included
	LabelsOperator *string `json:"labelsOperator,omitempty" tf:"labels_operator,omitempty"`

	// (String) Allocation group name
	// Allocation group name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of cluster namespaces to track
	// List of cluster namespaces to track
	Namespaces []*string `json:"namespaces,omitempty" tf:"namespaces,omitempty"`
}

type AllocationGroupParameters struct {

	// (Set of String) List of CAST AI cluster ids
	// List of CAST AI cluster ids
	// +kubebuilder:validation:Optional
	// +listType=set
	ClusterIds []*string `json:"clusterIds,omitempty" tf:"cluster_ids,omitempty"`

	// (Map of String) Labels used to select workloads to track
	// Labels used to select workloads to track
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// workload needs to have at least one label to be included
	// AND - workload needs to have all the labels to be included
	// Operator with which to connect the labels
	// OR (default) - workload needs to have at least one label to be included
	// AND - workload needs to have all the labels to be included
	// +kubebuilder:validation:Optional
	LabelsOperator *string `json:"labelsOperator,omitempty" tf:"labels_operator,omitempty"`

	// (String) Allocation group name
	// Allocation group name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of cluster namespaces to track
	// List of cluster namespaces to track
	// +kubebuilder:validation:Optional
	Namespaces []*string `json:"namespaces,omitempty" tf:"namespaces,omitempty"`
}

// AllocationGroupSpec defines the desired state of AllocationGroup
type AllocationGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AllocationGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AllocationGroupInitParameters `json:"initProvider,omitempty"`
}

// AllocationGroupStatus defines the observed state of AllocationGroup.
type AllocationGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AllocationGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AllocationGroup is the Schema for the AllocationGroups API. Manage allocation group. Allocation group reference https://docs.cast.ai/docs/allocation-groups
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,castai}
type AllocationGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   AllocationGroupSpec   `json:"spec"`
	Status AllocationGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AllocationGroupList contains a list of AllocationGroups
type AllocationGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AllocationGroup `json:"items"`
}

// Repository type metadata.
var (
	AllocationGroup_Kind             = "AllocationGroup"
	AllocationGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AllocationGroup_Kind}.String()
	AllocationGroup_KindAPIVersion   = AllocationGroup_Kind + "." + CRDGroupVersion.String()
	AllocationGroup_GroupVersionKind = CRDGroupVersion.WithKind(AllocationGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&AllocationGroup{}, &AllocationGroupList{})
}
