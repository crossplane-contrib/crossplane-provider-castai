/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AssignmentsInitParameters struct {
}

type AssignmentsObservation struct {

	// (String) ID of the cluster to assign the commitment to.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// (Number) Priority of the assignment. The lower the value, the higher the priority. 1 is the highest priority.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`
}

type AssignmentsParameters struct {
}

type AzureReservationsInitParameters struct {
}

type AzureReservationsObservation struct {

	// (Number) Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
	AllowedUsage *float64 `json:"allowedUsage,omitempty" tf:"allowed_usage,omitempty"`

	// (Block List) List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority. (see below for nested schema)
	Assignments []AssignmentsObservation `json:"assignments,omitempty" tf:"assignments,omitempty"`

	// (Number)
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// (String)
	EndTimestamp *string `json:"endTimestamp,omitempty" tf:"end_timestamp,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String)
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// (String) Name of the commitment to match.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String)
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// (Boolean) If enabled, it's possible to assign priorities to the assigned clusters.
	Prioritization *bool `json:"prioritization,omitempty" tf:"prioritization,omitempty"`

	// (String) Region of the commitment to match.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (String)
	ReservationID *string `json:"reservationId,omitempty" tf:"reservation_id,omitempty"`

	// (String)
	ReservationStatus *string `json:"reservationStatus,omitempty" tf:"reservation_status,omitempty"`

	// (String) Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
	ScalingStrategy *string `json:"scalingStrategy,omitempty" tf:"scaling_strategy,omitempty"`

	// (String)
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (String)
	ScopeResourceGroup *string `json:"scopeResourceGroup,omitempty" tf:"scope_resource_group,omitempty"`

	// (String)
	ScopeSubscription *string `json:"scopeSubscription,omitempty" tf:"scope_subscription,omitempty"`

	// (String)
	StartTimestamp *string `json:"startTimestamp,omitempty" tf:"start_timestamp,omitempty"`

	// (String) Status of the commitment in CAST AI.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type AzureReservationsParameters struct {
}

type CommitmentConfigsAssignmentsInitParameters struct {

	// (String) ID of the cluster to assign the commitment to.
	// ID of the cluster to assign the commitment to.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`
}

type CommitmentConfigsAssignmentsObservation struct {

	// (String) ID of the cluster to assign the commitment to.
	// ID of the cluster to assign the commitment to.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// (Number) Priority of the assignment. The lower the value, the higher the priority. 1 is the highest priority.
	// Priority of the assignment. The lower the value, the higher the priority. 1 is the highest priority.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`
}

type CommitmentConfigsAssignmentsParameters struct {

	// (String) ID of the cluster to assign the commitment to.
	// ID of the cluster to assign the commitment to.
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`
}

type CommitmentConfigsInitParameters struct {

	// (Number) Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
	// Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
	AllowedUsage *float64 `json:"allowedUsage,omitempty" tf:"allowed_usage,omitempty"`

	// (Block List) List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority. (see below for nested schema)
	// List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority.
	Assignments []CommitmentConfigsAssignmentsInitParameters `json:"assignments,omitempty" tf:"assignments,omitempty"`

	// (Block List, Min: 1, Max: 1) Matcher used to map config to a commitment. (see below for nested schema)
	// Matcher used to map config to a commitment.
	Matcher []MatcherInitParameters `json:"matcher,omitempty" tf:"matcher,omitempty"`

	// (Boolean) If enabled, it's possible to assign priorities to the assigned clusters.
	// If enabled, it's possible to assign priorities to the assigned clusters.
	Prioritization *bool `json:"prioritization,omitempty" tf:"prioritization,omitempty"`

	// (String) Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
	// Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
	ScalingStrategy *string `json:"scalingStrategy,omitempty" tf:"scaling_strategy,omitempty"`

	// (String) Status of the commitment in CAST AI.
	// Status of the commitment in CAST AI.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type CommitmentConfigsObservation struct {

	// (Number) Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
	// Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
	AllowedUsage *float64 `json:"allowedUsage,omitempty" tf:"allowed_usage,omitempty"`

	// (Block List) List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority. (see below for nested schema)
	// List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority.
	Assignments []CommitmentConfigsAssignmentsObservation `json:"assignments,omitempty" tf:"assignments,omitempty"`

	// (Block List, Min: 1, Max: 1) Matcher used to map config to a commitment. (see below for nested schema)
	// Matcher used to map config to a commitment.
	Matcher []MatcherObservation `json:"matcher,omitempty" tf:"matcher,omitempty"`

	// (Boolean) If enabled, it's possible to assign priorities to the assigned clusters.
	// If enabled, it's possible to assign priorities to the assigned clusters.
	Prioritization *bool `json:"prioritization,omitempty" tf:"prioritization,omitempty"`

	// (String) Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
	// Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
	ScalingStrategy *string `json:"scalingStrategy,omitempty" tf:"scaling_strategy,omitempty"`

	// (String) Status of the commitment in CAST AI.
	// Status of the commitment in CAST AI.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type CommitmentConfigsParameters struct {

	// (Number) Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
	// Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
	// +kubebuilder:validation:Optional
	AllowedUsage *float64 `json:"allowedUsage,omitempty" tf:"allowed_usage,omitempty"`

	// (Block List) List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority. (see below for nested schema)
	// List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority.
	// +kubebuilder:validation:Optional
	Assignments []CommitmentConfigsAssignmentsParameters `json:"assignments,omitempty" tf:"assignments,omitempty"`

	// (Block List, Min: 1, Max: 1) Matcher used to map config to a commitment. (see below for nested schema)
	// Matcher used to map config to a commitment.
	// +kubebuilder:validation:Optional
	Matcher []MatcherParameters `json:"matcher" tf:"matcher,omitempty"`

	// (Boolean) If enabled, it's possible to assign priorities to the assigned clusters.
	// If enabled, it's possible to assign priorities to the assigned clusters.
	// +kubebuilder:validation:Optional
	Prioritization *bool `json:"prioritization,omitempty" tf:"prioritization,omitempty"`

	// (String) Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
	// Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
	// +kubebuilder:validation:Optional
	ScalingStrategy *string `json:"scalingStrategy,omitempty" tf:"scaling_strategy,omitempty"`

	// (String) Status of the commitment in CAST AI.
	// Status of the commitment in CAST AI.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type CommitmentsInitParameters struct {

	// (String) CSV file containing reservations exported from Azure.
	// CSV file containing reservations exported from Azure.
	AzureReservationsCsv *string `json:"azureReservationsCsv,omitempty" tf:"azure_reservations_csv,omitempty"`

	// (Block List) List of commitment configurations. (see below for nested schema)
	// List of commitment configurations.
	CommitmentConfigs []CommitmentConfigsInitParameters `json:"commitmentConfigs,omitempty" tf:"commitment_configs,omitempty"`

	// (String) JSON file containing CUDs exported from GCP.
	// JSON file containing CUDs exported from GCP.
	GCPCudsJSON *string `json:"gcpCudsJson,omitempty" tf:"gcp_cuds_json,omitempty"`
}

type CommitmentsObservation struct {

	// (List of Object) List of Azure reservations. (see below for nested schema)
	// List of Azure reservations.
	AzureReservations []AzureReservationsObservation `json:"azureReservations,omitempty" tf:"azure_reservations,omitempty"`

	// (String) CSV file containing reservations exported from Azure.
	// CSV file containing reservations exported from Azure.
	AzureReservationsCsv *string `json:"azureReservationsCsv,omitempty" tf:"azure_reservations_csv,omitempty"`

	// (Block List) List of commitment configurations. (see below for nested schema)
	// List of commitment configurations.
	CommitmentConfigs []CommitmentConfigsObservation `json:"commitmentConfigs,omitempty" tf:"commitment_configs,omitempty"`

	// (List of Object) List of GCP CUDs. (see below for nested schema)
	// List of GCP CUDs.
	GCPCuds []GCPCudsObservation `json:"gcpCuds,omitempty" tf:"gcp_cuds,omitempty"`

	// (String) JSON file containing CUDs exported from GCP.
	// JSON file containing CUDs exported from GCP.
	GCPCudsJSON *string `json:"gcpCudsJson,omitempty" tf:"gcp_cuds_json,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CommitmentsParameters struct {

	// (String) CSV file containing reservations exported from Azure.
	// CSV file containing reservations exported from Azure.
	// +kubebuilder:validation:Optional
	AzureReservationsCsv *string `json:"azureReservationsCsv,omitempty" tf:"azure_reservations_csv,omitempty"`

	// (Block List) List of commitment configurations. (see below for nested schema)
	// List of commitment configurations.
	// +kubebuilder:validation:Optional
	CommitmentConfigs []CommitmentConfigsParameters `json:"commitmentConfigs,omitempty" tf:"commitment_configs,omitempty"`

	// (String) JSON file containing CUDs exported from GCP.
	// JSON file containing CUDs exported from GCP.
	// +kubebuilder:validation:Optional
	GCPCudsJSON *string `json:"gcpCudsJson,omitempty" tf:"gcp_cuds_json,omitempty"`
}

type GCPCudsAssignmentsInitParameters struct {
}

type GCPCudsAssignmentsObservation struct {

	// (String) ID of the cluster to assign the commitment to.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// (Number) Priority of the assignment. The lower the value, the higher the priority. 1 is the highest priority.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`
}

type GCPCudsAssignmentsParameters struct {
}

type GCPCudsInitParameters struct {
}

type GCPCudsObservation struct {

	// (Number) Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
	AllowedUsage *float64 `json:"allowedUsage,omitempty" tf:"allowed_usage,omitempty"`

	// (Block List) List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority. (see below for nested schema)
	Assignments []GCPCudsAssignmentsObservation `json:"assignments,omitempty" tf:"assignments,omitempty"`

	// (Number)
	CPU *float64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// (String)
	CudID *string `json:"cudId,omitempty" tf:"cud_id,omitempty"`

	// (String)
	CudStatus *string `json:"cudStatus,omitempty" tf:"cud_status,omitempty"`

	// (String)
	EndTimestamp *string `json:"endTimestamp,omitempty" tf:"end_timestamp,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number)
	MemoryMb *float64 `json:"memoryMb,omitempty" tf:"memory_mb,omitempty"`

	// (String) Name of the commitment to match.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String)
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// (Boolean) If enabled, it's possible to assign priorities to the assigned clusters.
	Prioritization *bool `json:"prioritization,omitempty" tf:"prioritization,omitempty"`

	// (String) Region of the commitment to match.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (String) Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
	ScalingStrategy *string `json:"scalingStrategy,omitempty" tf:"scaling_strategy,omitempty"`

	// (String)
	StartTimestamp *string `json:"startTimestamp,omitempty" tf:"start_timestamp,omitempty"`

	// (String) Status of the commitment in CAST AI.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (String) Type of the commitment to match. For compute resources, it's the type of the machine.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type GCPCudsParameters struct {
}

type MatcherInitParameters struct {

	// (String) Name of the commitment to match.
	// Name of the commitment to match.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Region of the commitment to match.
	// Region of the commitment to match.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (String) Type of the commitment to match. For compute resources, it's the type of the machine.
	// Type of the commitment to match. For compute resources, it's the type of the machine.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type MatcherObservation struct {

	// (String) Name of the commitment to match.
	// Name of the commitment to match.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Region of the commitment to match.
	// Region of the commitment to match.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (String) Type of the commitment to match. For compute resources, it's the type of the machine.
	// Type of the commitment to match. For compute resources, it's the type of the machine.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type MatcherParameters struct {

	// (String) Name of the commitment to match.
	// Name of the commitment to match.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) Region of the commitment to match.
	// Region of the commitment to match.
	// +kubebuilder:validation:Optional
	Region *string `json:"region" tf:"region,omitempty"`

	// (String) Type of the commitment to match. For compute resources, it's the type of the machine.
	// Type of the commitment to match. For compute resources, it's the type of the machine.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// CommitmentsSpec defines the desired state of Commitments
type CommitmentsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CommitmentsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CommitmentsInitParameters `json:"initProvider,omitempty"`
}

// CommitmentsStatus defines the observed state of Commitments.
type CommitmentsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CommitmentsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Commitments is the Schema for the Commitmentss API. Commitments represent cloud service provider reserved instances (Azure) and commited use discounts (GCP) that can be used by CAST AI autoscaler.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,castai}
type Commitments struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CommitmentsSpec   `json:"spec"`
	Status            CommitmentsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CommitmentsList contains a list of Commitmentss
type CommitmentsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Commitments `json:"items"`
}

// Repository type metadata.
var (
	Commitments_Kind             = "Commitments"
	Commitments_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Commitments_Kind}.String()
	Commitments_KindAPIVersion   = Commitments_Kind + "." + CRDGroupVersion.String()
	Commitments_GroupVersionKind = CRDGroupVersion.WithKind(Commitments_Kind)
)

func init() {
	SchemeBuilder.Register(&Commitments{}, &CommitmentsList{})
}
