/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EksClusterIdObservation struct {
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type EksClusterIdParameters struct {

	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// EksClusterIdSpec defines the desired state of EksClusterId
type EksClusterIdSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EksClusterIdParameters `json:"forProvider"`
}

// EksClusterIdStatus defines the observed state of EksClusterId.
type EksClusterIdStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EksClusterIdObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EksClusterId is the Schema for the EksClusterIds API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,castai}
type EksClusterId struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.accountId)",message="accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.clusterName)",message="clusterName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.region)",message="region is a required parameter"
	Spec   EksClusterIdSpec   `json:"spec"`
	Status EksClusterIdStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EksClusterIdList contains a list of EksClusterIds
type EksClusterIdList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EksClusterId `json:"items"`
}

// Repository type metadata.
var (
	EksClusterId_Kind             = "EksClusterId"
	EksClusterId_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EksClusterId_Kind}.String()
	EksClusterId_KindAPIVersion   = EksClusterId_Kind + "." + CRDGroupVersion.String()
	EksClusterId_GroupVersionKind = CRDGroupVersion.WithKind(EksClusterId_Kind)
)

func init() {
	SchemeBuilder.Register(&EksClusterId{}, &EksClusterIdList{})
}
