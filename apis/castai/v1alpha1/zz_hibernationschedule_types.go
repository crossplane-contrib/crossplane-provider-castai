/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AffinityInitParameters struct {

	// (String) Key of a taint to be added to nodes created from this template.
	// Key of the node affinity selector.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) Operator of the node affinity selector. Allowed values: DOES_NOT_EXIST, EXISTS, GT, IN, LT, NOT_IN.
	// Operator of the node affinity selector. Allowed values: DOES_NOT_EXIST, EXISTS, GT, IN, LT, NOT_IN.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (List of String) Values of the node affinity selector.
	// Values of the node affinity selector.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type AffinityObservation struct {

	// (String) Key of a taint to be added to nodes created from this template.
	// Key of the node affinity selector.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) Operator of the node affinity selector. Allowed values: DOES_NOT_EXIST, EXISTS, GT, IN, LT, NOT_IN.
	// Operator of the node affinity selector. Allowed values: DOES_NOT_EXIST, EXISTS, GT, IN, LT, NOT_IN.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (List of String) Values of the node affinity selector.
	// Values of the node affinity selector.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type AffinityParameters struct {

	// (String) Key of a taint to be added to nodes created from this template.
	// Key of the node affinity selector.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) Operator of the node affinity selector. Allowed values: DOES_NOT_EXIST, EXISTS, GT, IN, LT, NOT_IN.
	// Operator of the node affinity selector. Allowed values: DOES_NOT_EXIST, EXISTS, GT, IN, LT, NOT_IN.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (List of String) Values of the node affinity selector.
	// Values of the node affinity selector.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type AssignmentInitParameters struct {

	// (String) ID of the cluster.
	// ID of the cluster.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`
}

type AssignmentObservation struct {

	// (String) ID of the cluster.
	// ID of the cluster.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`
}

type AssignmentParameters struct {

	// (String) ID of the cluster.
	// ID of the cluster.
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`
}

type ClusterAssignmentsInitParameters struct {

	// (Block List) (see below for nested schema)
	Assignment []AssignmentInitParameters `json:"assignment,omitempty" tf:"assignment,omitempty"`
}

type ClusterAssignmentsObservation struct {

	// (Block List) (see below for nested schema)
	Assignment []AssignmentObservation `json:"assignment,omitempty" tf:"assignment,omitempty"`
}

type ClusterAssignmentsParameters struct {

	// (Block List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Assignment []AssignmentParameters `json:"assignment,omitempty" tf:"assignment,omitempty"`
}

type GpuConfigInitParameters struct {

	// (Number) Number of GPUs.
	// Number of GPUs.
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// (String) GPU type.
	// GPU type.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type GpuConfigObservation struct {

	// (Number) Number of GPUs.
	// Number of GPUs.
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// (String) GPU type.
	// GPU type.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type GpuConfigParameters struct {

	// (Number) Number of GPUs.
	// Number of GPUs.
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count" tf:"count,omitempty"`

	// (String) GPU type.
	// GPU type.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type HibernationScheduleInitParameters struct {

	// (Block List, Max: 1) (see below for nested schema)
	ClusterAssignments []ClusterAssignmentsInitParameters `json:"clusterAssignments,omitempty" tf:"cluster_assignments,omitempty"`

	// (Boolean) Enables or disables the schedule.
	// Enables or disables the schedule.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Name of the schedule.
	// Name of the schedule.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID of the organization. If not provided, then will attempt to infer it using CAST AI API client.
	// ID of the organization. If not provided, then will attempt to infer it using CAST AI API client.
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	PauseConfig []PauseConfigInitParameters `json:"pauseConfig,omitempty" tf:"pause_config,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	ResumeConfig []ResumeConfigInitParameters `json:"resumeConfig,omitempty" tf:"resume_config,omitempty"`
}

type HibernationScheduleObservation struct {

	// (Block List, Max: 1) (see below for nested schema)
	ClusterAssignments []ClusterAssignmentsObservation `json:"clusterAssignments,omitempty" tf:"cluster_assignments,omitempty"`

	// (Boolean) Enables or disables the schedule.
	// Enables or disables the schedule.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of the schedule.
	// Name of the schedule.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID of the organization. If not provided, then will attempt to infer it using CAST AI API client.
	// ID of the organization. If not provided, then will attempt to infer it using CAST AI API client.
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	PauseConfig []PauseConfigObservation `json:"pauseConfig,omitempty" tf:"pause_config,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	ResumeConfig []ResumeConfigObservation `json:"resumeConfig,omitempty" tf:"resume_config,omitempty"`
}

type HibernationScheduleParameters struct {

	// (Block List, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	ClusterAssignments []ClusterAssignmentsParameters `json:"clusterAssignments,omitempty" tf:"cluster_assignments,omitempty"`

	// (Boolean) Enables or disables the schedule.
	// Enables or disables the schedule.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Name of the schedule.
	// Name of the schedule.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID of the organization. If not provided, then will attempt to infer it using CAST AI API client.
	// ID of the organization. If not provided, then will attempt to infer it using CAST AI API client.
	// +kubebuilder:validation:Optional
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	PauseConfig []PauseConfigParameters `json:"pauseConfig,omitempty" tf:"pause_config,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	ResumeConfig []ResumeConfigParameters `json:"resumeConfig,omitempty" tf:"resume_config,omitempty"`
}

type JobConfigInitParameters struct {

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	NodeConfig []NodeConfigInitParameters `json:"nodeConfig,omitempty" tf:"node_config,omitempty"`
}

type JobConfigObservation struct {

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	NodeConfig []NodeConfigObservation `json:"nodeConfig,omitempty" tf:"node_config,omitempty"`
}

type JobConfigParameters struct {

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	NodeConfig []NodeConfigParameters `json:"nodeConfig" tf:"node_config,omitempty"`
}

type KubernetesTaintsInitParameters struct {

	// (String) Effect of a taint to be added to nodes created from this template, the default is NoSchedule. Allowed values: NoSchedule, NoExecute.
	// Effect of a taint to be added to nodes created from this template, the default is NoSchedule. Allowed values: NoSchedule, NoExecute.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// (String) Key of a taint to be added to nodes created from this template.
	// Key of a taint to be added to nodes created from this template.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) Value of a taint to be added to nodes created from this template.
	// Value of a taint to be added to nodes created from this template.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type KubernetesTaintsObservation struct {

	// (String) Effect of a taint to be added to nodes created from this template, the default is NoSchedule. Allowed values: NoSchedule, NoExecute.
	// Effect of a taint to be added to nodes created from this template, the default is NoSchedule. Allowed values: NoSchedule, NoExecute.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// (String) Key of a taint to be added to nodes created from this template.
	// Key of a taint to be added to nodes created from this template.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) Value of a taint to be added to nodes created from this template.
	// Value of a taint to be added to nodes created from this template.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type KubernetesTaintsParameters struct {

	// (String) Effect of a taint to be added to nodes created from this template, the default is NoSchedule. Allowed values: NoSchedule, NoExecute.
	// Effect of a taint to be added to nodes created from this template, the default is NoSchedule. Allowed values: NoSchedule, NoExecute.
	// +kubebuilder:validation:Optional
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// (String) Key of a taint to be added to nodes created from this template.
	// Key of a taint to be added to nodes created from this template.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) Value of a taint to be added to nodes created from this template.
	// Value of a taint to be added to nodes created from this template.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NodeAffinityInitParameters struct {

	// (Block List) (see below for nested schema)
	Affinity []AffinityInitParameters `json:"affinity,omitempty" tf:"affinity,omitempty"`

	// (String) Key of a taint to be added to nodes created from this template.
	// Key of a taint to be added to nodes created from this template.
	DedicatedGroup *string `json:"dedicatedGroup,omitempty" tf:"dedicated_group,omitempty"`
}

type NodeAffinityObservation struct {

	// (Block List) (see below for nested schema)
	Affinity []AffinityObservation `json:"affinity,omitempty" tf:"affinity,omitempty"`

	// (String) Key of a taint to be added to nodes created from this template.
	// Key of a taint to be added to nodes created from this template.
	DedicatedGroup *string `json:"dedicatedGroup,omitempty" tf:"dedicated_group,omitempty"`
}

type NodeAffinityParameters struct {

	// (Block List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Affinity []AffinityParameters `json:"affinity,omitempty" tf:"affinity,omitempty"`

	// (String) Key of a taint to be added to nodes created from this template.
	// Key of a taint to be added to nodes created from this template.
	// +kubebuilder:validation:Optional
	DedicatedGroup *string `json:"dedicatedGroup" tf:"dedicated_group,omitempty"`
}

type NodeConfigInitParameters struct {

	// (String) ID reference of Node Configuration to be used for node creation. Supersedes 'config_name' parameter.
	// ID reference of Node Configuration to be used for node creation. Supersedes 'config_name' parameter.
	ConfigID *string `json:"configId,omitempty" tf:"config_id,omitempty"`

	// (String) Name reference of Node Configuration to be used for node creation. Superseded if 'config_id' parameter is provided.
	// Name reference of Node Configuration to be used for node creation. Superseded if 'config_id' parameter is provided.
	ConfigName *string `json:"configName,omitempty" tf:"config_name,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	GpuConfig []GpuConfigInitParameters `json:"gpuConfig,omitempty" tf:"gpu_config,omitempty"`

	// (String) Instance type.
	// Instance type.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// (Map of String) Custom labels to be added to the node.
	// Custom labels to be added to the node.
	// +mapType=granular
	KubernetesLabels map[string]*string `json:"kubernetesLabels,omitempty" tf:"kubernetes_labels,omitempty"`

	// (Block List) Custom taints to be added to the node created from this configuration. (see below for nested schema)
	// Custom taints to be added to the node created from this configuration.
	KubernetesTaints []KubernetesTaintsInitParameters `json:"kubernetesTaints,omitempty" tf:"kubernetes_taints,omitempty"`

	// (Block List) Custom taints to be added to the node created from this configuration. (see below for nested schema)
	// Custom taints to be added to the node created from this configuration.
	NodeAffinity []NodeAffinityInitParameters `json:"nodeAffinity,omitempty" tf:"node_affinity,omitempty"`

	// (Block List) Custom taints to be added to the node created from this configuration. (see below for nested schema)
	// Custom taints to be added to the node created from this configuration.
	SpotConfig []SpotConfigInitParameters `json:"spotConfig,omitempty" tf:"spot_config,omitempty"`

	// (String) Node subnet ID.
	// Node subnet ID.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// (Block List) (see below for nested schema)
	Volume []VolumeInitParameters `json:"volume,omitempty" tf:"volume,omitempty"`

	// (String) Zone of the node.
	// Zone of the node.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type NodeConfigObservation struct {

	// (String) ID reference of Node Configuration to be used for node creation. Supersedes 'config_name' parameter.
	// ID reference of Node Configuration to be used for node creation. Supersedes 'config_name' parameter.
	ConfigID *string `json:"configId,omitempty" tf:"config_id,omitempty"`

	// (String) Name reference of Node Configuration to be used for node creation. Superseded if 'config_id' parameter is provided.
	// Name reference of Node Configuration to be used for node creation. Superseded if 'config_id' parameter is provided.
	ConfigName *string `json:"configName,omitempty" tf:"config_name,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	GpuConfig []GpuConfigObservation `json:"gpuConfig,omitempty" tf:"gpu_config,omitempty"`

	// (String) Instance type.
	// Instance type.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// (Map of String) Custom labels to be added to the node.
	// Custom labels to be added to the node.
	// +mapType=granular
	KubernetesLabels map[string]*string `json:"kubernetesLabels,omitempty" tf:"kubernetes_labels,omitempty"`

	// (Block List) Custom taints to be added to the node created from this configuration. (see below for nested schema)
	// Custom taints to be added to the node created from this configuration.
	KubernetesTaints []KubernetesTaintsObservation `json:"kubernetesTaints,omitempty" tf:"kubernetes_taints,omitempty"`

	// (Block List) Custom taints to be added to the node created from this configuration. (see below for nested schema)
	// Custom taints to be added to the node created from this configuration.
	NodeAffinity []NodeAffinityObservation `json:"nodeAffinity,omitempty" tf:"node_affinity,omitempty"`

	// (Block List) Custom taints to be added to the node created from this configuration. (see below for nested schema)
	// Custom taints to be added to the node created from this configuration.
	SpotConfig []SpotConfigObservation `json:"spotConfig,omitempty" tf:"spot_config,omitempty"`

	// (String) Node subnet ID.
	// Node subnet ID.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// (Block List) (see below for nested schema)
	Volume []VolumeObservation `json:"volume,omitempty" tf:"volume,omitempty"`

	// (String) Zone of the node.
	// Zone of the node.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type NodeConfigParameters struct {

	// (String) ID reference of Node Configuration to be used for node creation. Supersedes 'config_name' parameter.
	// ID reference of Node Configuration to be used for node creation. Supersedes 'config_name' parameter.
	// +kubebuilder:validation:Optional
	ConfigID *string `json:"configId,omitempty" tf:"config_id,omitempty"`

	// (String) Name reference of Node Configuration to be used for node creation. Superseded if 'config_id' parameter is provided.
	// Name reference of Node Configuration to be used for node creation. Superseded if 'config_id' parameter is provided.
	// +kubebuilder:validation:Optional
	ConfigName *string `json:"configName,omitempty" tf:"config_name,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	GpuConfig []GpuConfigParameters `json:"gpuConfig,omitempty" tf:"gpu_config,omitempty"`

	// (String) Instance type.
	// Instance type.
	// +kubebuilder:validation:Optional
	InstanceType *string `json:"instanceType" tf:"instance_type,omitempty"`

	// (Map of String) Custom labels to be added to the node.
	// Custom labels to be added to the node.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	KubernetesLabels map[string]*string `json:"kubernetesLabels,omitempty" tf:"kubernetes_labels,omitempty"`

	// (Block List) Custom taints to be added to the node created from this configuration. (see below for nested schema)
	// Custom taints to be added to the node created from this configuration.
	// +kubebuilder:validation:Optional
	KubernetesTaints []KubernetesTaintsParameters `json:"kubernetesTaints,omitempty" tf:"kubernetes_taints,omitempty"`

	// (Block List) Custom taints to be added to the node created from this configuration. (see below for nested schema)
	// Custom taints to be added to the node created from this configuration.
	// +kubebuilder:validation:Optional
	NodeAffinity []NodeAffinityParameters `json:"nodeAffinity,omitempty" tf:"node_affinity,omitempty"`

	// (Block List) Custom taints to be added to the node created from this configuration. (see below for nested schema)
	// Custom taints to be added to the node created from this configuration.
	// +kubebuilder:validation:Optional
	SpotConfig []SpotConfigParameters `json:"spotConfig,omitempty" tf:"spot_config,omitempty"`

	// (String) Node subnet ID.
	// Node subnet ID.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// (Block List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Volume []VolumeParameters `json:"volume,omitempty" tf:"volume,omitempty"`

	// (String) Zone of the node.
	// Zone of the node.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type PauseConfigInitParameters struct {

	// (Boolean) Enables or disables the schedule.
	// Enables or disables the pause configuration.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	Schedule []ScheduleInitParameters `json:"schedule,omitempty" tf:"schedule,omitempty"`
}

type PauseConfigObservation struct {

	// (Boolean) Enables or disables the schedule.
	// Enables or disables the pause configuration.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	Schedule []ScheduleObservation `json:"schedule,omitempty" tf:"schedule,omitempty"`
}

type PauseConfigParameters struct {

	// (Boolean) Enables or disables the schedule.
	// Enables or disables the pause configuration.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Schedule []ScheduleParameters `json:"schedule" tf:"schedule,omitempty"`
}

type RaidConfigInitParameters struct {

	// (Number) Specify the RAID0 chunk size in kilobytes, this parameter affects the read/write in the disk array and must be tailored for the type of data written by the workloads in the node. If not provided it will default to 64KB
	// Specify the RAID0 chunk size in kilobytes, this parameter affects the read/write in the disk array and must be tailored for the type of data written by the workloads in the node. If not provided it will default to 64KB
	ChunkSizeKb *float64 `json:"chunkSizeKb,omitempty" tf:"chunk_size_kb,omitempty"`
}

type RaidConfigObservation struct {

	// (Number) Specify the RAID0 chunk size in kilobytes, this parameter affects the read/write in the disk array and must be tailored for the type of data written by the workloads in the node. If not provided it will default to 64KB
	// Specify the RAID0 chunk size in kilobytes, this parameter affects the read/write in the disk array and must be tailored for the type of data written by the workloads in the node. If not provided it will default to 64KB
	ChunkSizeKb *float64 `json:"chunkSizeKb,omitempty" tf:"chunk_size_kb,omitempty"`
}

type RaidConfigParameters struct {

	// (Number) Specify the RAID0 chunk size in kilobytes, this parameter affects the read/write in the disk array and must be tailored for the type of data written by the workloads in the node. If not provided it will default to 64KB
	// Specify the RAID0 chunk size in kilobytes, this parameter affects the read/write in the disk array and must be tailored for the type of data written by the workloads in the node. If not provided it will default to 64KB
	// +kubebuilder:validation:Optional
	ChunkSizeKb *float64 `json:"chunkSizeKb,omitempty" tf:"chunk_size_kb,omitempty"`
}

type ResumeConfigInitParameters struct {

	// (Boolean) Enables or disables the schedule.
	// Enables or disables the pause configuration.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	JobConfig []JobConfigInitParameters `json:"jobConfig,omitempty" tf:"job_config,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	Schedule []ResumeConfigScheduleInitParameters `json:"schedule,omitempty" tf:"schedule,omitempty"`
}

type ResumeConfigObservation struct {

	// (Boolean) Enables or disables the schedule.
	// Enables or disables the pause configuration.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	JobConfig []JobConfigObservation `json:"jobConfig,omitempty" tf:"job_config,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	Schedule []ResumeConfigScheduleObservation `json:"schedule,omitempty" tf:"schedule,omitempty"`
}

type ResumeConfigParameters struct {

	// (Boolean) Enables or disables the schedule.
	// Enables or disables the pause configuration.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	JobConfig []JobConfigParameters `json:"jobConfig" tf:"job_config,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Schedule []ResumeConfigScheduleParameters `json:"schedule" tf:"schedule,omitempty"`
}

type ResumeConfigScheduleInitParameters struct {

	// (String) Cron expression defining when the schedule should trigger.
	// Cron expression defining when the schedule should trigger.
	//
	// The `cron` expression can optionally include the `CRON_TZ` variable at the beginning to specify the timezone in which the schedule should be interpreted.
	//
	// Example:
	// ```plaintext
	// CRON_TZ=America/New_York 0 12 * * ?
	// ```
	// In the example above, the `CRON_TZ` variable is set to "America/New_York" indicating that the cron expression should be interpreted in the Eastern Time (ET) timezone.
	//
	// To retrieve a list of available timezone values, you can use the following API endpoint:
	//
	// GET https://api.cast.ai/v1/time-zones
	//
	// When using the `CRON_TZ` variable, ensure that the specified timezone is valid and supported by checking the list of available timezones from the API endpoint.  If the `CRON_TZ` variable is not specified, the cron expression will be interpreted in the UTC timezone.
	CronExpression *string `json:"cronExpression,omitempty" tf:"cron_expression,omitempty"`
}

type ResumeConfigScheduleObservation struct {

	// (String) Cron expression defining when the schedule should trigger.
	// Cron expression defining when the schedule should trigger.
	//
	// The `cron` expression can optionally include the `CRON_TZ` variable at the beginning to specify the timezone in which the schedule should be interpreted.
	//
	// Example:
	// ```plaintext
	// CRON_TZ=America/New_York 0 12 * * ?
	// ```
	// In the example above, the `CRON_TZ` variable is set to "America/New_York" indicating that the cron expression should be interpreted in the Eastern Time (ET) timezone.
	//
	// To retrieve a list of available timezone values, you can use the following API endpoint:
	//
	// GET https://api.cast.ai/v1/time-zones
	//
	// When using the `CRON_TZ` variable, ensure that the specified timezone is valid and supported by checking the list of available timezones from the API endpoint.  If the `CRON_TZ` variable is not specified, the cron expression will be interpreted in the UTC timezone.
	CronExpression *string `json:"cronExpression,omitempty" tf:"cron_expression,omitempty"`
}

type ResumeConfigScheduleParameters struct {

	// (String) Cron expression defining when the schedule should trigger.
	// Cron expression defining when the schedule should trigger.
	//
	// The `cron` expression can optionally include the `CRON_TZ` variable at the beginning to specify the timezone in which the schedule should be interpreted.
	//
	// Example:
	// ```plaintext
	// CRON_TZ=America/New_York 0 12 * * ?
	// ```
	// In the example above, the `CRON_TZ` variable is set to "America/New_York" indicating that the cron expression should be interpreted in the Eastern Time (ET) timezone.
	//
	// To retrieve a list of available timezone values, you can use the following API endpoint:
	//
	// GET https://api.cast.ai/v1/time-zones
	//
	// When using the `CRON_TZ` variable, ensure that the specified timezone is valid and supported by checking the list of available timezones from the API endpoint.  If the `CRON_TZ` variable is not specified, the cron expression will be interpreted in the UTC timezone.
	// +kubebuilder:validation:Optional
	CronExpression *string `json:"cronExpression" tf:"cron_expression,omitempty"`
}

type ScheduleInitParameters struct {

	// (String) Cron expression defining when the schedule should trigger.
	// Cron expression defining when the schedule should trigger.
	//
	// The `cron` expression can optionally include the `CRON_TZ` variable at the beginning to specify the timezone in which the schedule should be interpreted.
	//
	// Example:
	// ```plaintext
	// CRON_TZ=America/New_York 0 12 * * ?
	// ```
	// In the example above, the `CRON_TZ` variable is set to "America/New_York" indicating that the cron expression should be interpreted in the Eastern Time (ET) timezone.
	//
	// To retrieve a list of available timezone values, you can use the following API endpoint:
	//
	// GET https://api.cast.ai/v1/time-zones
	//
	// When using the `CRON_TZ` variable, ensure that the specified timezone is valid and supported by checking the list of available timezones from the API endpoint.  If the `CRON_TZ` variable is not specified, the cron expression will be interpreted in the UTC timezone.
	CronExpression *string `json:"cronExpression,omitempty" tf:"cron_expression,omitempty"`
}

type ScheduleObservation struct {

	// (String) Cron expression defining when the schedule should trigger.
	// Cron expression defining when the schedule should trigger.
	//
	// The `cron` expression can optionally include the `CRON_TZ` variable at the beginning to specify the timezone in which the schedule should be interpreted.
	//
	// Example:
	// ```plaintext
	// CRON_TZ=America/New_York 0 12 * * ?
	// ```
	// In the example above, the `CRON_TZ` variable is set to "America/New_York" indicating that the cron expression should be interpreted in the Eastern Time (ET) timezone.
	//
	// To retrieve a list of available timezone values, you can use the following API endpoint:
	//
	// GET https://api.cast.ai/v1/time-zones
	//
	// When using the `CRON_TZ` variable, ensure that the specified timezone is valid and supported by checking the list of available timezones from the API endpoint.  If the `CRON_TZ` variable is not specified, the cron expression will be interpreted in the UTC timezone.
	CronExpression *string `json:"cronExpression,omitempty" tf:"cron_expression,omitempty"`
}

type ScheduleParameters struct {

	// (String) Cron expression defining when the schedule should trigger.
	// Cron expression defining when the schedule should trigger.
	//
	// The `cron` expression can optionally include the `CRON_TZ` variable at the beginning to specify the timezone in which the schedule should be interpreted.
	//
	// Example:
	// ```plaintext
	// CRON_TZ=America/New_York 0 12 * * ?
	// ```
	// In the example above, the `CRON_TZ` variable is set to "America/New_York" indicating that the cron expression should be interpreted in the Eastern Time (ET) timezone.
	//
	// To retrieve a list of available timezone values, you can use the following API endpoint:
	//
	// GET https://api.cast.ai/v1/time-zones
	//
	// When using the `CRON_TZ` variable, ensure that the specified timezone is valid and supported by checking the list of available timezones from the API endpoint.  If the `CRON_TZ` variable is not specified, the cron expression will be interpreted in the UTC timezone.
	// +kubebuilder:validation:Optional
	CronExpression *string `json:"cronExpression" tf:"cron_expression,omitempty"`
}

type SpotConfigInitParameters struct {

	// (String) Spot instance price. Applicable only for AWS nodes.
	// Spot instance price. Applicable only for AWS nodes.
	PriceHourly *string `json:"priceHourly,omitempty" tf:"price_hourly,omitempty"`

	// (Boolean) Whether node should be created as spot instance.
	// Whether node should be created as spot instance.
	Spot *bool `json:"spot,omitempty" tf:"spot,omitempty"`
}

type SpotConfigObservation struct {

	// (String) Spot instance price. Applicable only for AWS nodes.
	// Spot instance price. Applicable only for AWS nodes.
	PriceHourly *string `json:"priceHourly,omitempty" tf:"price_hourly,omitempty"`

	// (Boolean) Whether node should be created as spot instance.
	// Whether node should be created as spot instance.
	Spot *bool `json:"spot,omitempty" tf:"spot,omitempty"`
}

type SpotConfigParameters struct {

	// (String) Spot instance price. Applicable only for AWS nodes.
	// Spot instance price. Applicable only for AWS nodes.
	// +kubebuilder:validation:Optional
	PriceHourly *string `json:"priceHourly,omitempty" tf:"price_hourly,omitempty"`

	// (Boolean) Whether node should be created as spot instance.
	// Whether node should be created as spot instance.
	// +kubebuilder:validation:Optional
	Spot *bool `json:"spot,omitempty" tf:"spot,omitempty"`
}

type VolumeInitParameters struct {

	// (Block List) (see below for nested schema)
	RaidConfig []RaidConfigInitParameters `json:"raidConfig,omitempty" tf:"raid_config,omitempty"`

	// (Number) Volume size in GiB.
	// Volume size in GiB.
	SizeGib *float64 `json:"sizeGib,omitempty" tf:"size_gib,omitempty"`
}

type VolumeObservation struct {

	// (Block List) (see below for nested schema)
	RaidConfig []RaidConfigObservation `json:"raidConfig,omitempty" tf:"raid_config,omitempty"`

	// (Number) Volume size in GiB.
	// Volume size in GiB.
	SizeGib *float64 `json:"sizeGib,omitempty" tf:"size_gib,omitempty"`
}

type VolumeParameters struct {

	// (Block List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	RaidConfig []RaidConfigParameters `json:"raidConfig,omitempty" tf:"raid_config,omitempty"`

	// (Number) Volume size in GiB.
	// Volume size in GiB.
	// +kubebuilder:validation:Optional
	SizeGib *float64 `json:"sizeGib,omitempty" tf:"size_gib,omitempty"`
}

// HibernationScheduleSpec defines the desired state of HibernationSchedule
type HibernationScheduleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HibernationScheduleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider HibernationScheduleInitParameters `json:"initProvider,omitempty"`
}

// HibernationScheduleStatus defines the observed state of HibernationSchedule.
type HibernationScheduleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HibernationScheduleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// HibernationSchedule is the Schema for the HibernationSchedules API. CAST AI hibernation schedule resource to manage hibernation schedules.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,castai}
type HibernationSchedule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.pauseConfig) || (has(self.initProvider) && has(self.initProvider.pauseConfig))",message="spec.forProvider.pauseConfig is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resumeConfig) || (has(self.initProvider) && has(self.initProvider.resumeConfig))",message="spec.forProvider.resumeConfig is a required parameter"
	Spec   HibernationScheduleSpec   `json:"spec"`
	Status HibernationScheduleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HibernationScheduleList contains a list of HibernationSchedules
type HibernationScheduleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HibernationSchedule `json:"items"`
}

// Repository type metadata.
var (
	HibernationSchedule_Kind             = "HibernationSchedule"
	HibernationSchedule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HibernationSchedule_Kind}.String()
	HibernationSchedule_KindAPIVersion   = HibernationSchedule_Kind + "." + CRDGroupVersion.String()
	HibernationSchedule_GroupVersionKind = CRDGroupVersion.WithKind(HibernationSchedule_Kind)
)

func init() {
	SchemeBuilder.Register(&HibernationSchedule{}, &HibernationScheduleList{})
}
