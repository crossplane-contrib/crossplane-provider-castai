/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MemberInitParameters struct {

	// (String)
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Kind of the member. Supported values include: user, service_account.
	// Kind of the member. Supported values include: user, service_account.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`
}

type MemberObservation struct {

	// (String)
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Kind of the member. Supported values include: user, service_account.
	// Kind of the member. Supported values include: user, service_account.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`
}

type MemberParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	Email *string `json:"email" tf:"email,omitempty"`

	// (String) The ID of this resource.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// (String) Kind of the member. Supported values include: user, service_account.
	// Kind of the member. Supported values include: user, service_account.
	// +kubebuilder:validation:Optional
	Kind *string `json:"kind" tf:"kind,omitempty"`
}

type MembersInitParameters struct {

	// (Block List) (see below for nested schema)
	Member []MemberInitParameters `json:"member,omitempty" tf:"member,omitempty"`
}

type MembersObservation struct {

	// (Block List) (see below for nested schema)
	Member []MemberObservation `json:"member,omitempty" tf:"member,omitempty"`
}

type MembersParameters struct {

	// (Block List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Member []MemberParameters `json:"member,omitempty" tf:"member,omitempty"`
}

type OrganizationGroupInitParameters struct {

	// (String) Description of the group.
	// Description of the group.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Block List) (see below for nested schema)
	Members []MembersInitParameters `json:"members,omitempty" tf:"members,omitempty"`

	// (String) Name of the group.
	// Name of the group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) CAST AI organization ID.
	// CAST AI organization ID.
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`
}

type OrganizationGroupObservation struct {

	// (String) Description of the group.
	// Description of the group.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List) (see below for nested schema)
	Members []MembersObservation `json:"members,omitempty" tf:"members,omitempty"`

	// (String) Name of the group.
	// Name of the group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) CAST AI organization ID.
	// CAST AI organization ID.
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`
}

type OrganizationGroupParameters struct {

	// (String) Description of the group.
	// Description of the group.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Block List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Members []MembersParameters `json:"members,omitempty" tf:"members,omitempty"`

	// (String) Name of the group.
	// Name of the group.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) CAST AI organization ID.
	// CAST AI organization ID.
	// +kubebuilder:validation:Optional
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`
}

// OrganizationGroupSpec defines the desired state of OrganizationGroup
type OrganizationGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrganizationGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OrganizationGroupInitParameters `json:"initProvider,omitempty"`
}

// OrganizationGroupStatus defines the observed state of OrganizationGroup.
type OrganizationGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrganizationGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OrganizationGroup is the Schema for the OrganizationGroups API. CAST AI organization group resource to manage organization groups
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,castai}
type OrganizationGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.organizationId) || (has(self.initProvider) && has(self.initProvider.organizationId))",message="spec.forProvider.organizationId is a required parameter"
	Spec   OrganizationGroupSpec   `json:"spec"`
	Status OrganizationGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationGroupList contains a list of OrganizationGroups
type OrganizationGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrganizationGroup `json:"items"`
}

// Repository type metadata.
var (
	OrganizationGroup_Kind             = "OrganizationGroup"
	OrganizationGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrganizationGroup_Kind}.String()
	OrganizationGroup_KindAPIVersion   = OrganizationGroup_Kind + "." + CRDGroupVersion.String()
	OrganizationGroup_GroupVersionKind = CRDGroupVersion.WithKind(OrganizationGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&OrganizationGroup{}, &OrganizationGroupList{})
}
