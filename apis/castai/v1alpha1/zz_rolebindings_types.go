/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RoleBindingsInitParameters struct {

	// (String) Description of the role binding.
	// Description of the role binding.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Name of role binding.
	// Name of role binding.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) CAST AI organization ID.
	// CAST AI organization ID.
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// (String) ID of role from role binding.
	// ID of role from role binding.
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// (Block List) Scopes of the role binding. (see below for nested schema)
	// Scopes of the role binding.
	Scopes []ScopesInitParameters `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// (Block List, Min: 1) (see below for nested schema)
	Subjects []SubjectsInitParameters `json:"subjects,omitempty" tf:"subjects,omitempty"`
}

type RoleBindingsObservation struct {

	// (String) Description of the role binding.
	// Description of the role binding.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of role binding.
	// Name of role binding.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) CAST AI organization ID.
	// CAST AI organization ID.
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// (String) ID of role from role binding.
	// ID of role from role binding.
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// (Block List) Scopes of the role binding. (see below for nested schema)
	// Scopes of the role binding.
	Scopes []ScopesObservation `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// (Block List, Min: 1) (see below for nested schema)
	Subjects []SubjectsObservation `json:"subjects,omitempty" tf:"subjects,omitempty"`
}

type RoleBindingsParameters struct {

	// (String) Description of the role binding.
	// Description of the role binding.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Name of role binding.
	// Name of role binding.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) CAST AI organization ID.
	// CAST AI organization ID.
	// +kubebuilder:validation:Optional
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// (String) ID of role from role binding.
	// ID of role from role binding.
	// +kubebuilder:validation:Optional
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// (Block List) Scopes of the role binding. (see below for nested schema)
	// Scopes of the role binding.
	// +kubebuilder:validation:Optional
	Scopes []ScopesParameters `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// (Block List, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Subjects []SubjectsParameters `json:"subjects,omitempty" tf:"subjects,omitempty"`
}

type ScopesInitParameters struct {

	// (String) Kind of the subject. Supported values include: user, service_account, group.
	// Scope of the role binding Supported values include: organization, cluster.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// (String) ID of the scope resource.
	// ID of the scope resource.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`
}

type ScopesObservation struct {

	// (String) Kind of the subject. Supported values include: user, service_account, group.
	// Scope of the role binding Supported values include: organization, cluster.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// (String) ID of the scope resource.
	// ID of the scope resource.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`
}

type ScopesParameters struct {

	// (String) Kind of the subject. Supported values include: user, service_account, group.
	// Scope of the role binding Supported values include: organization, cluster.
	// +kubebuilder:validation:Optional
	Kind *string `json:"kind" tf:"kind,omitempty"`

	// (String) ID of the scope resource.
	// ID of the scope resource.
	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`
}

type SubjectInitParameters struct {

	// (String) Optional, required only if kind is group.
	// Optional, required only if `kind` is `group`.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// (String) Kind of the subject. Supported values include: user, service_account, group.
	// Kind of the subject. Supported values include: user, service_account, group.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// (String) Optional, required only if kind is service_account.
	// Optional, required only if `kind` is `service_account`.
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// (String) Optional, required only if kind is user.
	// Optional, required only if `kind` is `user`.
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type SubjectObservation struct {

	// (String) Optional, required only if kind is group.
	// Optional, required only if `kind` is `group`.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// (String) Kind of the subject. Supported values include: user, service_account, group.
	// Kind of the subject. Supported values include: user, service_account, group.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// (String) Optional, required only if kind is service_account.
	// Optional, required only if `kind` is `service_account`.
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// (String) Optional, required only if kind is user.
	// Optional, required only if `kind` is `user`.
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type SubjectParameters struct {

	// (String) Optional, required only if kind is group.
	// Optional, required only if `kind` is `group`.
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// (String) Kind of the subject. Supported values include: user, service_account, group.
	// Kind of the subject. Supported values include: user, service_account, group.
	// +kubebuilder:validation:Optional
	Kind *string `json:"kind" tf:"kind,omitempty"`

	// (String) Optional, required only if kind is service_account.
	// Optional, required only if `kind` is `service_account`.
	// +kubebuilder:validation:Optional
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// (String) Optional, required only if kind is user.
	// Optional, required only if `kind` is `user`.
	// +kubebuilder:validation:Optional
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type SubjectsInitParameters struct {

	// (Block List) (see below for nested schema)
	Subject []SubjectInitParameters `json:"subject,omitempty" tf:"subject,omitempty"`
}

type SubjectsObservation struct {

	// (Block List) (see below for nested schema)
	Subject []SubjectObservation `json:"subject,omitempty" tf:"subject,omitempty"`
}

type SubjectsParameters struct {

	// (Block List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Subject []SubjectParameters `json:"subject,omitempty" tf:"subject,omitempty"`
}

// RoleBindingsSpec defines the desired state of RoleBindings
type RoleBindingsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RoleBindingsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RoleBindingsInitParameters `json:"initProvider,omitempty"`
}

// RoleBindingsStatus defines the observed state of RoleBindings.
type RoleBindingsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RoleBindingsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RoleBindings is the Schema for the RoleBindingss API. CAST AI organization group resource to manage organization groups
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,castai}
type RoleBindings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.organizationId) || (has(self.initProvider) && has(self.initProvider.organizationId))",message="spec.forProvider.organizationId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.roleId) || (has(self.initProvider) && has(self.initProvider.roleId))",message="spec.forProvider.roleId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subjects) || (has(self.initProvider) && has(self.initProvider.subjects))",message="spec.forProvider.subjects is a required parameter"
	Spec   RoleBindingsSpec   `json:"spec"`
	Status RoleBindingsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RoleBindingsList contains a list of RoleBindingss
type RoleBindingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RoleBindings `json:"items"`
}

// Repository type metadata.
var (
	RoleBindings_Kind             = "RoleBindings"
	RoleBindings_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RoleBindings_Kind}.String()
	RoleBindings_KindAPIVersion   = RoleBindings_Kind + "." + CRDGroupVersion.String()
	RoleBindings_GroupVersionKind = CRDGroupVersion.WithKind(RoleBindings_Kind)
)

func init() {
	SchemeBuilder.Register(&RoleBindings{}, &RoleBindingsList{})
}
