/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ScalingPolicyOrderInitParameters struct {

	// (String) CAST AI cluster id
	// CAST AI cluster id
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// (List of String) List of scaling policy IDs in the order they should be applied.
	// List of scaling policy IDs in the order they should be applied.
	PolicyIds []*string `json:"policyIds,omitempty" tf:"policy_ids,omitempty"`
}

type ScalingPolicyOrderObservation struct {

	// (String) CAST AI cluster id
	// CAST AI cluster id
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (List of String) List of scaling policy IDs in the order they should be applied.
	// List of scaling policy IDs in the order they should be applied.
	PolicyIds []*string `json:"policyIds,omitempty" tf:"policy_ids,omitempty"`
}

type ScalingPolicyOrderParameters struct {

	// (String) CAST AI cluster id
	// CAST AI cluster id
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// (List of String) List of scaling policy IDs in the order they should be applied.
	// List of scaling policy IDs in the order they should be applied.
	// +kubebuilder:validation:Optional
	PolicyIds []*string `json:"policyIds,omitempty" tf:"policy_ids,omitempty"`
}

// ScalingPolicyOrderSpec defines the desired state of ScalingPolicyOrder
type ScalingPolicyOrderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ScalingPolicyOrderParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ScalingPolicyOrderInitParameters `json:"initProvider,omitempty"`
}

// ScalingPolicyOrderStatus defines the observed state of ScalingPolicyOrder.
type ScalingPolicyOrderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ScalingPolicyOrderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ScalingPolicyOrder is the Schema for the ScalingPolicyOrders API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,castai}
type ScalingPolicyOrder struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterId) || (has(self.initProvider) && has(self.initProvider.clusterId))",message="spec.forProvider.clusterId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policyIds) || (has(self.initProvider) && has(self.initProvider.policyIds))",message="spec.forProvider.policyIds is a required parameter"
	Spec   ScalingPolicyOrderSpec   `json:"spec"`
	Status ScalingPolicyOrderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ScalingPolicyOrderList contains a list of ScalingPolicyOrders
type ScalingPolicyOrderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ScalingPolicyOrder `json:"items"`
}

// Repository type metadata.
var (
	ScalingPolicyOrder_Kind             = "ScalingPolicyOrder"
	ScalingPolicyOrder_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ScalingPolicyOrder_Kind}.String()
	ScalingPolicyOrder_KindAPIVersion   = ScalingPolicyOrder_Kind + "." + CRDGroupVersion.String()
	ScalingPolicyOrder_GroupVersionKind = CRDGroupVersion.WithKind(ScalingPolicyOrder_Kind)
)

func init() {
	SchemeBuilder.Register(&ScalingPolicyOrder{}, &ScalingPolicyOrderList{})
}
