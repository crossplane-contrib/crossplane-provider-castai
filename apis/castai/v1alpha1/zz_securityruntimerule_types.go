/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecurityRuntimeRuleInitParameters struct {

	// Category of the rule.
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// Whether the rule is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Key-value labels attached to the rule.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Unique name of the runtime security rule.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Optional CEL expression for resource selection.
	ResourceSelector *string `json:"resourceSelector,omitempty" tf:"resource_selector,omitempty"`

	// The engine type used to evaluate the rule. Only RULE_ENGINE_TYPE_CEL is currently supported.
	RuleEngineType *string `json:"ruleEngineType,omitempty" tf:"rule_engine_type,omitempty"`

	// CEL rule expression text.
	RuleText *string `json:"ruleText,omitempty" tf:"rule_text,omitempty"`

	// Severity of the rule. One of SEVERITY_CRITICAL, SEVERITY_HIGH, SEVERITY_MEDIUM, SEVERITY_LOW, SEVERITY_NONE.
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`
}

type SecurityRuntimeRuleObservation struct {

	// Number of anomalies detected using this rule.
	AnomaliesCount *float64 `json:"anomaliesCount,omitempty" tf:"anomalies_count,omitempty"`

	// Category of the rule.
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// Whether the rule is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Indicates whether the rule is a built-in rule.
	IsBuiltIn *bool `json:"isBuiltIn,omitempty" tf:"is_built_in,omitempty"`

	// Key-value labels attached to the rule.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Unique name of the runtime security rule.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Optional CEL expression for resource selection.
	ResourceSelector *string `json:"resourceSelector,omitempty" tf:"resource_selector,omitempty"`

	// The engine type used to evaluate the rule. Only RULE_ENGINE_TYPE_CEL is currently supported.
	RuleEngineType *string `json:"ruleEngineType,omitempty" tf:"rule_engine_type,omitempty"`

	// CEL rule expression text.
	RuleText *string `json:"ruleText,omitempty" tf:"rule_text,omitempty"`

	// Severity of the rule. One of SEVERITY_CRITICAL, SEVERITY_HIGH, SEVERITY_MEDIUM, SEVERITY_LOW, SEVERITY_NONE.
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`

	// Type of the rule (internal value).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Custom lists used in this rule, if any.
	UsedCustomLists []*string `json:"usedCustomLists,omitempty" tf:"used_custom_lists,omitempty"`
}

type SecurityRuntimeRuleParameters struct {

	// Category of the rule.
	// +kubebuilder:validation:Optional
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// Whether the rule is enabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Key-value labels attached to the rule.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Unique name of the runtime security rule.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Optional CEL expression for resource selection.
	// +kubebuilder:validation:Optional
	ResourceSelector *string `json:"resourceSelector,omitempty" tf:"resource_selector,omitempty"`

	// The engine type used to evaluate the rule. Only RULE_ENGINE_TYPE_CEL is currently supported.
	// +kubebuilder:validation:Optional
	RuleEngineType *string `json:"ruleEngineType,omitempty" tf:"rule_engine_type,omitempty"`

	// CEL rule expression text.
	// +kubebuilder:validation:Optional
	RuleText *string `json:"ruleText,omitempty" tf:"rule_text,omitempty"`

	// Severity of the rule. One of SEVERITY_CRITICAL, SEVERITY_HIGH, SEVERITY_MEDIUM, SEVERITY_LOW, SEVERITY_NONE.
	// +kubebuilder:validation:Optional
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`
}

// SecurityRuntimeRuleSpec defines the desired state of SecurityRuntimeRule
type SecurityRuntimeRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecurityRuntimeRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecurityRuntimeRuleInitParameters `json:"initProvider,omitempty"`
}

// SecurityRuntimeRuleStatus defines the observed state of SecurityRuntimeRule.
type SecurityRuntimeRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecurityRuntimeRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecurityRuntimeRule is the Schema for the SecurityRuntimeRules API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,castai}
type SecurityRuntimeRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ruleText) || (has(self.initProvider) && has(self.initProvider.ruleText))",message="spec.forProvider.ruleText is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.severity) || (has(self.initProvider) && has(self.initProvider.severity))",message="spec.forProvider.severity is a required parameter"
	Spec   SecurityRuntimeRuleSpec   `json:"spec"`
	Status SecurityRuntimeRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityRuntimeRuleList contains a list of SecurityRuntimeRules
type SecurityRuntimeRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityRuntimeRule `json:"items"`
}

// Repository type metadata.
var (
	SecurityRuntimeRule_Kind             = "SecurityRuntimeRule"
	SecurityRuntimeRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecurityRuntimeRule_Kind}.String()
	SecurityRuntimeRule_KindAPIVersion   = SecurityRuntimeRule_Kind + "." + CRDGroupVersion.String()
	SecurityRuntimeRule_GroupVersionKind = CRDGroupVersion.WithKind(SecurityRuntimeRule_Kind)
)

func init() {
	SchemeBuilder.Register(&SecurityRuntimeRule{}, &SecurityRuntimeRuleList{})
}
