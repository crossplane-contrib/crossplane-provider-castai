/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceAccountKeyInitParameters struct {

	// (Boolean) Whether the service account key is active. Defaults to true.
	// Whether the service account key is active. Defaults to true.
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The expiration time of the service account key in RFC3339 format. Defaults to an empty string.
	// The expiration time of the service account key in RFC3339 format. Defaults to an empty string.
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// (String) Name of the service account key.
	// Name of the service account key.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID of the organization.
	// ID of the organization.
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// (String) ID of the service account.
	// ID of the service account.
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`
}

type ServiceAccountKeyObservation struct {

	// (Boolean) Whether the service account key is active. Defaults to true.
	// Whether the service account key is active. Defaults to true.
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The expiration time of the service account key in RFC3339 format. Defaults to an empty string.
	// The expiration time of the service account key in RFC3339 format. Defaults to an empty string.
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Last time the service account key was used.
	// Last time the service account key was used.
	LastUsedAt *string `json:"lastUsedAt,omitempty" tf:"last_used_at,omitempty"`

	// (String) Name of the service account key.
	// Name of the service account key.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID of the organization.
	// ID of the organization.
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// (String) Prefix of the service account key.
	// Prefix of the service account key.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// (String) ID of the service account.
	// ID of the service account.
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// (String) The token of the service account key used for authentication.
	// The token of the service account key used for authentication.
	Token *string `json:"token,omitempty" tf:"token,omitempty"`
}

type ServiceAccountKeyParameters struct {

	// (Boolean) Whether the service account key is active. Defaults to true.
	// Whether the service account key is active. Defaults to true.
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The expiration time of the service account key in RFC3339 format. Defaults to an empty string.
	// The expiration time of the service account key in RFC3339 format. Defaults to an empty string.
	// +kubebuilder:validation:Optional
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// (String) Name of the service account key.
	// Name of the service account key.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID of the organization.
	// ID of the organization.
	// +kubebuilder:validation:Optional
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// (String) ID of the service account.
	// ID of the service account.
	// +kubebuilder:validation:Optional
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`
}

// ServiceAccountKeySpec defines the desired state of ServiceAccountKey
type ServiceAccountKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceAccountKeyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServiceAccountKeyInitParameters `json:"initProvider,omitempty"`
}

// ServiceAccountKeyStatus defines the observed state of ServiceAccountKey.
type ServiceAccountKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceAccountKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServiceAccountKey is the Schema for the ServiceAccountKeys API. Service account key resource allows managing CAST AI service account keys.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,castai}
type ServiceAccountKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.organizationId) || (has(self.initProvider) && has(self.initProvider.organizationId))",message="spec.forProvider.organizationId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceAccountId) || (has(self.initProvider) && has(self.initProvider.serviceAccountId))",message="spec.forProvider.serviceAccountId is a required parameter"
	Spec   ServiceAccountKeySpec   `json:"spec"`
	Status ServiceAccountKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceAccountKeyList contains a list of ServiceAccountKeys
type ServiceAccountKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceAccountKey `json:"items"`
}

// Repository type metadata.
var (
	ServiceAccountKey_Kind             = "ServiceAccountKey"
	ServiceAccountKey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceAccountKey_Kind}.String()
	ServiceAccountKey_KindAPIVersion   = ServiceAccountKey_Kind + "." + CRDGroupVersion.String()
	ServiceAccountKey_GroupVersionKind = CRDGroupVersion.WithKind(ServiceAccountKey_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceAccountKey{}, &ServiceAccountKeyList{})
}
