/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigurationDefaultObservation struct {

	// CAST AI cluster id
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Id of the node configuration
	ConfigurationID *string `json:"configurationId,omitempty" tf:"configuration_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ConfigurationDefaultParameters struct {

	// CAST AI cluster id
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Id of the node configuration
	// +kubebuilder:validation:Optional
	ConfigurationID *string `json:"configurationId,omitempty" tf:"configuration_id,omitempty"`
}

// ConfigurationDefaultSpec defines the desired state of ConfigurationDefault
type ConfigurationDefaultSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigurationDefaultParameters `json:"forProvider"`
}

// ConfigurationDefaultStatus defines the observed state of ConfigurationDefault.
type ConfigurationDefaultStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigurationDefaultObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationDefault is the Schema for the ConfigurationDefaults API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,castai}
type ConfigurationDefault struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.clusterId)",message="clusterId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.configurationId)",message="configurationId is a required parameter"
	Spec   ConfigurationDefaultSpec   `json:"spec"`
	Status ConfigurationDefaultStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationDefaultList contains a list of ConfigurationDefaults
type ConfigurationDefaultList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigurationDefault `json:"items"`
}

// Repository type metadata.
var (
	ConfigurationDefault_Kind             = "ConfigurationDefault"
	ConfigurationDefault_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConfigurationDefault_Kind}.String()
	ConfigurationDefault_KindAPIVersion   = ConfigurationDefault_Kind + "." + CRDGroupVersion.String()
	ConfigurationDefault_GroupVersionKind = CRDGroupVersion.WithKind(ConfigurationDefault_Kind)
)

func init() {
	SchemeBuilder.Register(&ConfigurationDefault{}, &ConfigurationDefaultList{})
}
